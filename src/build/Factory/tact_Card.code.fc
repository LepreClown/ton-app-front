#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Card.headers.fc";
#include "tact_Card.stdlib.fc";
#include "tact_Card.storage.fc";

;;
;; Contract Card functions
;;

(slice, slice, int, int) $Card$_contract_init(slice $owner, slice $from, int $next_item) impure inline_ref {
    var (($self'owner, $self'from, $self'item, $self'password)) = (null(), null(), null(), null());
    $self'from = $from;
    $self'item = $next_item;
    $self'owner = $owner;
    $self'password = 0;
    return ($self'owner, $self'from, $self'item, $self'password);
}

((slice, slice, int, int), int) $Card$_fun_password((slice, slice, int, int) $self) impure inline_ref {
    var (($self'owner, $self'from, $self'item, $self'password)) = $self;
    return (($self'owner, $self'from, $self'item, $self'password), $self'password);
}

((slice, slice, int, int), int) $Card$_fun_cardByIndex((slice, slice, int, int) $self) impure inline_ref {
    var (($self'owner, $self'from, $self'item, $self'password)) = $self;
    return (($self'owner, $self'from, $self'item, $self'password), $self'item);
}

((slice, slice, int, int), slice) $Card$_fun_balance((slice, slice, int, int) $self) impure inline_ref {
    var (($self'owner, $self'from, $self'item, $self'password)) = $self;
    return (($self'owner, $self'from, $self'item, $self'password), $Int$_fun_toCoinsString(__tact_my_balance()));
}

((slice, slice, int, int), slice) $Card$_fun_addressContract((slice, slice, int, int) $self) impure inline_ref {
    var (($self'owner, $self'from, $self'item, $self'password)) = $self;
    return (($self'owner, $self'from, $self'item, $self'password), my_address());
}

((slice, slice, int, int), ()) $Card$_fun_requireOwner((slice, slice, int, int) $self) impure inline_ref {
    var (($self'owner, $self'from, $self'item, $self'password)) = $self;
    throw_unless(132, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'owner, $self'from, $self'item, $self'password), ());
}

((slice, slice, int, int), slice) $Card$_fun_owner((slice, slice, int, int) $self) impure inline_ref {
    var (($self'owner, $self'from, $self'item, $self'password)) = $self;
    return (($self'owner, $self'from, $self'item, $self'password), $self'owner);
}

;;
;; Receivers of a Contract Card
;;

(((slice, slice, int, int)), ()) $Card$_internal_binary_Deposit((slice, slice, int, int) $self, (int) $msg) impure inline {
    var ($self'owner, $self'from, $self'item, $self'password) = $self;
    var ($msg'password) = $msg;
    throw_unless(39434, ($self'password == 0));
    $self'password = $msg'password;
    return (($self'owner, $self'from, $self'item, $self'password), ());
}

(((slice, slice, int, int)), ()) $Card$_internal_binary_WithdrawUser((slice, slice, int, int) $self, (int, slice) $msg) impure inline {
    var ($self'owner, $self'from, $self'item, $self'password) = $self;
    var ($msg'amount, $msg'password) = $msg;
    throw_unless(25156, (string_hash($msg'password) == $self'password));
    if (($msg'amount != 0)) {
        $global_send($SendParameters$_constructor_to_bounce_value_mode(__tact_context_get_sender(), true, $msg'amount, (64 + 2)));
    } else {
        $global_send($SendParameters$_constructor_to_bounce_value_mode(__tact_context_get_sender(), true, $msg'amount, (128 + 2)));
    }
    return (($self'owner, $self'from, $self'item, $self'password), ());
}

(((slice, slice, int, int)), ()) $Card$_internal_binary_WithdrawOwner((slice, slice, int, int) $self, (int) $msg) impure inline {
    var ($self'owner, $self'from, $self'item, $self'password) = $self;
    var ($msg'amount) = $msg;
    ($self'owner, $self'from, $self'item, $self'password)~$Card$_fun_requireOwner();
    if (($msg'amount != 0)) {
        $global_send($SendParameters$_constructor_to_bounce_value_mode(__tact_context_get_sender(), true, $msg'amount, (64 + 2)));
    } else {
        $global_send($SendParameters$_constructor_to_bounce_value_mode(__tact_context_get_sender(), true, $msg'amount, (128 + 2)));
    }
    return (($self'owner, $self'from, $self'item, $self'password), ());
}

(((slice, slice, int, int)), ()) $Card$_internal_binary_Deploy((slice, slice, int, int) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'from, $self'item, $self'password) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'from, $self'item, $self'password)~$Card$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'from, $self'item, $self'password), ());
}

;;
;; Get methods of a Contract Card
;;

_ %password() method_id(75076) {
    var self = $Card$_contract_load();
    var res = self~$Card$_fun_password();
    return res;
}

_ %cardByIndex() method_id(123752) {
    var self = $Card$_contract_load();
    var res = self~$Card$_fun_cardByIndex();
    return res;
}

_ %balance() method_id(104128) {
    var self = $Card$_contract_load();
    var res = self~$Card$_fun_balance();
    return res;
}

_ %addressContract() method_id(66122) {
    var self = $Card$_contract_load();
    var res = self~$Card$_fun_addressContract();
    return res;
}

_ %owner() method_id(83229) {
    var self = $Card$_contract_load();
    var res = self~$Card$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmR5FQZVRjbZQ27UkfLBW39KP1voxwRckz7LDoBsJhzcng";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Card
;;

((slice, slice, int, int), int) $Card$_contract_router_internal((slice, slice, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Deposit message
    if (op == 4290673970) {
        var msg = in_msg~$Deposit$_load();
        self~$Card$_internal_binary_Deposit(msg);
        return (self, true);
    }
    
    ;; Receive WithdrawUser message
    if (op == 4182767761) {
        var msg = in_msg~$WithdrawUser$_load();
        self~$Card$_internal_binary_WithdrawUser(msg);
        return (self, true);
    }
    
    ;; Receive WithdrawOwner message
    if (op == 1468352145) {
        var msg = in_msg~$WithdrawOwner$_load();
        self~$Card$_internal_binary_WithdrawOwner(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Card$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Card$_contract_load();
    
    ;; Handle operation
    int handled = self~$Card$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Card$_contract_store(self);
}
