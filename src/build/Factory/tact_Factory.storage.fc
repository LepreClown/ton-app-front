;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_body_mode_code_data(slice to, int value, cell body, int mode, cell code, cell data) inline {
    return (true, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: Deposit
;; Header: 0xffbe7d32
;; TLB: deposit#ffbe7d32 password:uint256 = Deposit
;;

builder $Deposit$_store(builder build_0, (int) v) inline {
    var (v'password) = v;
    build_0 = store_uint(build_0, 4290673970, 32);
    build_0 = build_0.store_uint(v'password, 256);
    return build_0;
}

cell $Deposit$_store_cell((int) v) inline {
    return $Deposit$_store(begin_cell(), v).end_cell();
}

((int)) $Deposit$_constructor_password(int password) inline {
    return (password);
}

;;
;; Type: CreateDeposit
;; Header: 0xa2268087
;; TLB: create_deposit#a2268087 password:uint256 amount:coins owner:address = CreateDeposit
;;

(slice, ((int, int, slice))) $CreateDeposit$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2720432263);
    var v'password = sc_0~load_uint(256);
    var v'amount = sc_0~load_coins();
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'password, v'amount, v'owner));
}

;;
;; Type: Card
;;

builder $Card$init$_store(builder build_0, (slice, slice, int) v) inline {
    var (v'owner, v'from, v'next_item) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'from);
    build_0 = build_0.store_int(v'next_item, 257);
    return build_0;
}

(cell, cell) $Card$_init_child(cell sys', slice $owner, slice $from, int $next_item) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Card
    cell mine = __tact_dict_get_code(source, 6914);
    contracts = __tact_dict_set_code(contracts, 6914, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Card$init$_store(b, ($owner, $from, $next_item));
    return (mine, b.end_cell());
}

;;
;; Type: Factory
;;

builder $Factory$_store(builder build_0, (int) v) inline {
    var (v'next_deposit_index) = v;
    build_0 = build_0.store_uint(v'next_deposit_index, 64);
    return build_0;
}

(slice, ((int))) $Factory$_load(slice sc_0) inline {
    var v'next_deposit_index = sc_0~load_uint(64);
    return (sc_0, (v'next_deposit_index));
}

(int) $Factory$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Factory$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $Factory$_contract_init();
    }
}

() $Factory$_contract_store((int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Factory$_store(b, v);
    set_data(b.end_cell());
}